# Generated from D:/AnacondaProjects/iust_compilers_teaching/grammars/AssignmentStatement2.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,14,117,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,0,1,1,1,1,1,2,1,
        2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,4,7,52,8,7,11,7,12,7,53,1,
        8,4,8,57,8,8,11,8,12,8,58,1,8,1,8,5,8,63,8,8,10,8,12,8,66,9,8,1,
        8,1,8,4,8,70,8,8,11,8,12,8,71,3,8,74,8,8,1,9,1,9,1,9,5,9,79,8,9,
        10,9,12,9,82,9,9,1,9,1,9,1,10,1,10,1,10,5,10,89,8,10,10,10,12,10,
        92,9,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,3,13,102,8,13,1,
        14,4,14,105,8,14,11,14,12,14,106,1,14,1,14,1,15,1,15,1,16,1,16,1,
        16,3,16,116,8,16,1,80,0,17,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,0,25,0,27,0,29,12,31,13,33,14,1,0,3,1,0,48,57,2,
        0,65,90,97,122,3,0,9,9,13,13,32,32,125,0,1,1,0,0,0,0,3,1,0,0,0,0,
        5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
        1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,1,35,1,0,0,0,3,38,1,0,0,0,5,40,1,0,0,0,7,42,
        1,0,0,0,9,44,1,0,0,0,11,46,1,0,0,0,13,48,1,0,0,0,15,51,1,0,0,0,17,
        73,1,0,0,0,19,75,1,0,0,0,21,85,1,0,0,0,23,93,1,0,0,0,25,95,1,0,0,
        0,27,101,1,0,0,0,29,104,1,0,0,0,31,110,1,0,0,0,33,115,1,0,0,0,35,
        36,5,58,0,0,36,37,5,61,0,0,37,2,1,0,0,0,38,39,5,43,0,0,39,4,1,0,
        0,0,40,41,5,45,0,0,41,6,1,0,0,0,42,43,5,42,0,0,43,8,1,0,0,0,44,45,
        5,47,0,0,45,10,1,0,0,0,46,47,5,40,0,0,47,12,1,0,0,0,48,49,5,41,0,
        0,49,14,1,0,0,0,50,52,3,23,11,0,51,50,1,0,0,0,52,53,1,0,0,0,53,51,
        1,0,0,0,53,54,1,0,0,0,54,16,1,0,0,0,55,57,3,23,11,0,56,55,1,0,0,
        0,57,58,1,0,0,0,58,56,1,0,0,0,58,59,1,0,0,0,59,60,1,0,0,0,60,64,
        5,46,0,0,61,63,3,23,11,0,62,61,1,0,0,0,63,66,1,0,0,0,64,62,1,0,0,
        0,64,65,1,0,0,0,65,74,1,0,0,0,66,64,1,0,0,0,67,69,5,46,0,0,68,70,
        3,23,11,0,69,68,1,0,0,0,70,71,1,0,0,0,71,69,1,0,0,0,71,72,1,0,0,
        0,72,74,1,0,0,0,73,56,1,0,0,0,73,67,1,0,0,0,74,18,1,0,0,0,75,80,
        5,34,0,0,76,79,3,27,13,0,77,79,9,0,0,0,78,76,1,0,0,0,78,77,1,0,0,
        0,79,82,1,0,0,0,80,81,1,0,0,0,80,78,1,0,0,0,81,83,1,0,0,0,82,80,
        1,0,0,0,83,84,5,34,0,0,84,20,1,0,0,0,85,90,3,25,12,0,86,89,3,25,
        12,0,87,89,3,23,11,0,88,86,1,0,0,0,88,87,1,0,0,0,89,92,1,0,0,0,90,
        88,1,0,0,0,90,91,1,0,0,0,91,22,1,0,0,0,92,90,1,0,0,0,93,94,7,0,0,
        0,94,24,1,0,0,0,95,96,7,1,0,0,96,26,1,0,0,0,97,98,5,92,0,0,98,102,
        5,34,0,0,99,100,5,92,0,0,100,102,5,92,0,0,101,97,1,0,0,0,101,99,
        1,0,0,0,102,28,1,0,0,0,103,105,7,2,0,0,104,103,1,0,0,0,105,106,1,
        0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,108,1,0,0,0,108,109,6,
        14,0,0,109,30,1,0,0,0,110,111,5,10,0,0,111,32,1,0,0,0,112,113,5,
        60,0,0,113,116,5,61,0,0,114,116,5,60,0,0,115,112,1,0,0,0,115,114,
        1,0,0,0,116,34,1,0,0,0,13,0,53,58,64,71,73,78,80,88,90,101,106,115,
        1,6,0,0
    ]

class AssignmentStatement2Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    INT = 8
    FLOAT = 9
    String = 10
    ID = 11
    WS = 12
    NEWLINE = 13
    RELOP = 14

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "':='", "'+'", "'-'", "'*'", "'/'", "'('", "')'", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "FLOAT", "String", "ID", "WS", "NEWLINE", "RELOP" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "INT", "FLOAT", "String", "ID", "DIGIT", "LETTER", "ESC", 
                  "WS", "NEWLINE", "RELOP" ]

    grammarFileName = "AssignmentStatement2.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


